{"version":3,"sources":["components/Container.tsx","About/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","_templateObject","props","gridTemplateColumns","Article","article","About_templateObject","Title","h2","_templateObject2","About","react_default","a","createElement","StyledContainer","App_templateObject","Name","h1","App_templateObject2","Profession","_templateObject3","Presentation","_templateObject4","Menu","nav","_templateObject5","Socials","ul","_templateObject6","Items","_templateObject7","App","react_router_dom","react_router","path","component","href","target","className","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+aAMO,IAAMA,EAAYC,IAAOC,IAAVC,IAEO,SAAAC,GAAK,OAAiC,MAA7BA,EAAMC,oBAA8B,kBAAoBD,EAAMC,2QCLpG,IAAMC,EAAUL,IAAOM,QAAVC,KAOPC,EAAQR,IAAOS,GAAVC,KAKEC,EAAkB,kBAC3BC,EAAAC,EAAAC,cAACT,EAAD,KACIO,EAAAC,EAAAC,cAACN,EAAD,cACAI,EAAAC,EAAAC,cAAA,k3CCXR,IAAMC,EAAkBf,YAAOD,EAAPC,CAAHgB,KAIfC,EAAOjB,IAAOkB,GAAVC,KAMJC,EAAapB,IAAOS,GAAVY,KAiBVC,EAAetB,IAAOM,QAAViB,KAOZC,EAAOxB,IAAOyB,IAAVC,KAaJC,EAAU3B,IAAO4B,GAAVC,KAWPC,EAAQ9B,IAAO4B,GAAVG,KA4CIC,EAtCO,kBACpBpB,EAAAC,EAAAC,cAACC,EAAD,CAAiBX,oBAAoB,YACnCQ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KAEErB,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAACG,EAAD,yBACAL,EAAAC,EAAAC,cAACM,EAAD,2BAEAR,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWzB,KAGlCC,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,wCAAwCC,OAAO,UACrD1B,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,oBAGpB3B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,+BAA+BC,OAAO,UAC5C1B,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,kBAGpB3B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,iCAAiCC,OAAO,UAC9C1B,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,oBAItB3B,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMO,GAAG,UAAT,aACJ5B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMO,GAAG,aAAT,aACJ5B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMO,GAAG,YAAT,uBC3FMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.73a1b4e9.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\ninterface IProps extends React.HTMLAttributes<any> {\r\n    gridTemplateColumns?: string;\r\n}\r\n\r\nexport const Container = styled.div<IProps>`\r\n    display: grid;\r\n    grid-template-columns: ${props => props.gridTemplateColumns == null ? \"repeat(12, 1fr)\" : props.gridTemplateColumns};\r\n    grid-gap: 15px;\r\n    max-width: 80em;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Article = styled.article`\r\n  margin: 30px 0;\r\n  p {\r\n    margin: 0 0 5px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  margin: 0 0 5px;\r\n  padding: 0;\r\n`;\r\n\r\nexport const About: React.FC = () =>\r\n    <Article>\r\n        <Title>About</Title>\r\n        <p>I'm a Software Developer currently working mainly with .NET tecnologies, focused in web based solutions.</p>\r\n    </Article>","import React from 'react';\nimport { Container } from './components/Container';\nimport styled from 'styled-components';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { About } from './About/About';\nimport './assets/icons.css';\n\nconst StyledContainer = styled(Container)`\n  margin-top: 12.5%;\n`;\n\nconst Name = styled.h1`\n  font-size: 44px;\n  font-weight: 300;\n  margin: 0 0 6px;\n`;\n\nconst Profession = styled.h2`\n  font-size: 26px;\n  font-weight: 300;\n  margin: 0 0 4px 1px;\n  position: relative;\n  padding-bottom: 6px;\n\n  ::after {\n    content: '';\n    border-bottom: 1px solid #d1d5de;\n    width: 520px;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n  }\n`;\n\nconst Presentation = styled.article`\n  width: 100%;\n  position: relative;\n  padding-top: 15px;\n  padding-bottom: 15px;\n`;\n\nconst Menu = styled.nav`\n  ul {\n    list-style: none;\n    display: inline-block;\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n\n  ul li {\n    padding: 12px;\n  }\n`;\n\nconst Socials = styled.ul`\n  border-right: 1px solid #d1d5de;\n  padding: 0 10px 0 0;\n  margin: 0 6px 0 0;\n\n  li span {\n    font-size: 20px;\n    vertical-align: text-bottom;\n  }\n`;\n\nconst Items = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\n\nconst App: React.FC = () =>\n  <StyledContainer gridTemplateColumns=\"10fr 2fr\">\n    <Router>\n\n      <Presentation>\n        <Name>Gustavo Murayama</Name>\n        <Profession>Software Developer</Profession>\n\n        <Route path=\"/about\" component={About} />\n      </Presentation>\n\n      <Menu>\n        <Socials>\n          <li>\n            <a href=\"https://www.linkedin.com/in/gmurayama\" target=\"_blank\">\n              <span className=\"icon-linkedin\"></span>\n            </a>\n          </li>\n          <li>\n            <a href=\"https://github.com/gmurayama\" target=\"_blank\">\n              <span className=\"icon-github\"></span>\n            </a>\n          </li>\n          <li>\n            <a href=\"https://twitter.com/gmurayama_\" target=\"_blank\">\n              <span className=\"icon-twitter\"></span>\n            </a>\n          </li>\n        </Socials>\n        <Items>\n          <li><Link to=\"/about\">About me</Link></li>\n          <li><Link to=\"/projects\">Projects</Link></li>\n          <li><Link to=\"/contact\">Contact</Link></li>\n        </Items>\n      </Menu>\n    </Router>\n  </StyledContainer>;\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}