{"version":3,"sources":["components/Container.tsx","About/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","_templateObject","props","gridTemplateColumns","Article","article","About_templateObject","Title","h2","_templateObject2","About","react_default","a","createElement","StyledContainer","App_templateObject","Name","h1","App_templateObject2","Profession","_templateObject3","Presentation","_templateObject4","Menu","nav","_templateObject5","Socials","ul","_templateObject6","Items","_templateObject7","App","react_router_dom","react_router","path","component","href","target","className","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+aAMO,IAAMA,EAAYC,IAAOC,IAAVC,IAEO,SAAAC,GAAK,OAAiC,MAA7BA,EAAMC,oBAA8B,kBAAoBD,EAAMC,2QCLpG,IAAMC,EAAUL,IAAOM,QAAVC,KAOPC,EAAQR,IAAOS,GAAVC,KAKEC,EAAkB,kBAC3BC,EAAAC,EAAAC,cAACT,EAAD,KACIO,EAAAC,EAAAC,cAACN,EAAD,cACAI,EAAAC,EAAAC,cAAA,k3CCXR,IAAMC,EAAkBf,YAAOD,EAAPC,CAAHgB,KAIfC,EAAOjB,IAAOkB,GAAVC,KAMJC,EAAapB,IAAOS,GAAVY,KAiBVC,EAAetB,IAAOM,QAAViB,KAOZC,EAAOxB,IAAOyB,IAAVC,KAaJC,EAAU3B,IAAO4B,GAAVC,KAWPC,EAAQ9B,IAAO4B,GAAVG,KA4CIC,EAtCO,kBACpBpB,EAAAC,EAAAC,cAACC,EAAD,CAAiBX,oBAAoB,YACnCQ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KAEErB,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAACG,EAAD,yBACAL,EAAAC,EAAAC,cAACM,EAAD,2BAEAR,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWzB,KAGlCC,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,wCAAwCC,OAAO,UACrD1B,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,oBAGpB3B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,+BAA+BC,OAAO,UAC5C1B,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,kBAGpB3B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,gCACNzB,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,kBAItB3B,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMO,GAAG,UAAT,aACJ5B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMO,GAAG,aAAT,aACJ5B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMO,GAAG,YAAT,uBC3FMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c57a3a9d.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\ninterface IProps extends React.HTMLAttributes<any> {\r\n    gridTemplateColumns?: string;\r\n}\r\n\r\nexport const Container = styled.div<IProps>`\r\n    display: grid;\r\n    grid-template-columns: ${props => props.gridTemplateColumns == null ? \"repeat(12, 1fr)\" : props.gridTemplateColumns};\r\n    grid-gap: 15px;\r\n    max-width: 80em;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Article = styled.article`\r\n  margin: 30px 0;\r\n  p {\r\n    margin: 0 0 5px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  margin: 0 0 5px;\r\n  padding: 0;\r\n`;\r\n\r\nexport const About: React.FC = () =>\r\n    <Article>\r\n        <Title>About</Title>\r\n        <p>I'm a Software Developer currently working mainly with .NET tecnologies, focused in web based solutions.</p>\r\n    </Article>","import React from 'react';\r\nimport { Container } from './components/Container';\r\nimport styled from 'styled-components';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { About } from './About/About';\r\nimport './assets/icons.css';\r\n\r\nconst StyledContainer = styled(Container)`\r\n  margin-top: 12.5%;\r\n`;\r\n\r\nconst Name = styled.h1`\r\n  font-size: 44px;\r\n  font-weight: 300;\r\n  margin: 0 0 6px;\r\n`;\r\n\r\nconst Profession = styled.h2`\r\n  font-size: 26px;\r\n  font-weight: 300;\r\n  margin: 0 0 4px 1px;\r\n  position: relative;\r\n  padding-bottom: 6px;\r\n\r\n  ::after {\r\n    content: '';\r\n    border-bottom: 1px solid #d1d5de;\r\n    width: 520px;\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n  }\r\n`;\r\n\r\nconst Presentation = styled.article`\r\n  width: 100%;\r\n  position: relative;\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n`;\r\n\r\nconst Menu = styled.nav`\r\n  ul {\r\n    list-style: none;\r\n    display: inline-block;\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n  }\r\n\r\n  ul li {\r\n    padding: 12px;\r\n  }\r\n`;\r\n\r\nconst Socials = styled.ul`\r\n  border-right: 1px solid #d1d5de;\r\n  padding: 0 10px 0 0;\r\n  margin: 0 6px 0 0;\r\n\r\n  li span {\r\n    font-size: 20px;\r\n    vertical-align: text-bottom;\r\n  }\r\n`;\r\n\r\nconst Items = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n`;\r\n\r\n\r\nconst App: React.FC = () =>\r\n  <StyledContainer gridTemplateColumns=\"10fr 2fr\">\r\n    <Router>\r\n\r\n      <Presentation>\r\n        <Name>Gustavo Murayama</Name>\r\n        <Profession>Software Developer</Profession>\r\n\r\n        <Route path=\"/about\" component={About} />\r\n      </Presentation>\r\n\r\n      <Menu>\r\n        <Socials>\r\n          <li>\r\n            <a href=\"https://www.linkedin.com/in/gmurayama\" target=\"_blank\">\r\n              <span className=\"icon-linkedin\"></span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"https://github.com/gmurayama\" target=\"_blank\">\r\n              <span className=\"icon-github\"></span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"mailto:gmurayama@outlook.com\">\r\n              <span className=\"icon-email\"></span>\r\n            </a>\r\n          </li>\r\n        </Socials>\r\n        <Items>\r\n          <li><Link to=\"/about\">About me</Link></li>\r\n          <li><Link to=\"/projects\">Projects</Link></li>\r\n          <li><Link to=\"/contact\">Contact</Link></li>\r\n        </Items>\r\n      </Menu>\r\n    </Router>\r\n  </StyledContainer>;\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}